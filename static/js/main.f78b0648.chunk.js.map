{"version":3,"sources":["components/Header/Header.js","components/Tiles/MovieTile.js","components/Tiles/MovieList.js","components/SelectList/MovieSelectList.js","components/Home.js","services/axios-movies.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","alt","title","MovieTile","url","movie","Poster","replace","Title","Actors","style","fontSize","Plot","MovieList","movieList","movies","map","index","key","MovieSelectList","React","useState","movieName","values","setValues","dropDownOptions","option","MenuItem","value","FormControl","variant","minWidth","InputLabel","htmlFor","Select","onChange","event","oldValues","target","name","inputProps","id","Home","axiosInstance","axios","create","baseURL","App","state","get","then","response","data","setState","error","console","log","this","path","process","render","location","Tabs","pathname","Tab","label","component","Link","to","exact","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f78b0648.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n// 'npm install --save prop-types' if want to use PropTypes\n// import PropTypes from 'prop-types';\n\nconst Header = props => (\n  <div className=\"container\">\n    <div className=\"headerTitle\">\n      <img className=\"titleIcon\" src=\"https://img.icons8.com/wired/50/000000/film-reel.png\" alt=\"film icon\"/>\n      <div>{props.title}</div>\n    </div>\n\n  </div>\n);\n\n// Header.propTypes = {\n//   name: PropTypes.string\n// };\n\nexport default Header;","import React from 'react';\nimport './MovieTile.css';\n\nconst MovieTile = (props) => {\n  const movie = props.movie;\n\n  // the poster img url in the json file are http, which will cause a '403 ERROR'.\n  // That is a common setup to limit the amount of hotlinking to images (when people link directly to image files on other hosts). Hot-linking is often prevented, because it causes traffic without actually getting a site real visitors.\n  // So a workaround is change the http to https\n  const httpToHttps = url => url.replace(/^http:\\/\\//i, 'https://');\n\n  return (\n    <div className=\"movie-card\">\n      <img className=\"card-img-top\" src={httpToHttps(movie.Poster)} alt={movie.Poster} />\n      <div className=\"card-body\">\n        <h2 className=\"card-title\">{movie.Title}</h2>\n        <h4 className=\"card-subtitle\">{movie.Actors}</h4>\n        <p className=\"text-justify\" style={{ fontSize: '14px' }}>{movie.Plot}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieTile;\n","import React from 'react';\nimport MovieTile from './MovieTile';\nimport './MovieList.css';\n\nconst MovieList = (props) => {\n  const movieList = props.movies.map((movie, index) => {\n    return <MovieTile movie={movie} key={index+movie.Title}/>\n  });\n\n  return (\n    <div className=\"movie-list\">\n      {movieList}\n    </div>\n  )\n};\n\nexport default MovieList;\n","import React from 'react';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nimport './MovieSelectList.css';\n\n\nconst MovieSelectList = (props) => {\n\n  // use React Hooks\n  const [values, setValues] = React.useState({\n    movieName: '',\n  });\n\n  // const [labelWidth, setLabelWidth] = React.useState(0);\n  // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current.offsetWidth);\n  // }, []);\n\n  const handleChange = event => {\n    setValues(oldValues => ({\n      ...oldValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const movieTitleList = props.movies.map(movie => movie.Title);\n  const dropDownOptions = movieTitleList.map((option, index) =>\n    <MenuItem value={option} key={index + option}>{option}</MenuItem>\n  );\n\n\n  return (\n    <div className=\"selectListContainer\">\n      <h3>Select a Movie Name to Display Details</h3>\n      <FormControl variant=\"outlined\" style={{minWidth: 300}}>\n        <InputLabel htmlFor=\"movie-name\">Movies</InputLabel>\n        <Select\n          value={values.movieName}\n          onChange={handleChange}\n          inputProps={{\n            name: 'movieName',\n            id: 'movie-name',\n          }}\n        >\n          {dropDownOptions}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default MovieSelectList;","import React from 'react';\nimport './Home.css';\n\nconst Home = () => (\n  <div className=\"homeContainer\">\n    <h2 className=\"homeTitle\">Welcome to React Movie Show</h2>\n    <div className=\"homeText\">\n      You can navigate between the header tabs, which will display the movie list as select list, or tiles\n    </div>\n  </div>\n);\n\nexport default Home;","import axios from 'axios';\n\n// create an axios instance\nconst axiosInstance = axios.create({\n  // fetch data from Firebase\n  baseURL: 'https://react-display-movie-c4fc7.firebaseio.com/'\n});\n\nexport default axiosInstance;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Header from './components/Header/Header';\nimport MovieList from './components/Tiles/MovieList';\nimport MovieSelectList from './components/SelectList/MovieSelectList';\nimport Home from './components/Home';\n\nimport axios from './services/axios-movies';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: []\n    };\n  }\n\n  componentDidMount() {\n    const movieJsonUrl = '/movies.json';\n\n    axios.get(movieJsonUrl)\n      .then(response => response.data)\n      .then((data) => {\n        data && this.setState({ movies: data })\n      }, error => {\n        console.log(error);\n      })\n  }\n\n  /*   \n    React Router paths donâ€™t match after deploying to GitHub Pages\n    To solve this:\n    In the <Router>, have to use \n    <Route path={`${process.env.PUBLIC_URL}/about`} component={About}></Route>\n    instead of \n    <Route path=\"/about\" component={About}></Route> \n    */\n\n  render() {\n    const title = 'React Movie Posters';\n    const movies = this.state.movies;\n    return (\n      <Router>\n        <Header title={title} />\n        <Route\n          path={`${process.env.PUBLIC_URL}/`}\n          render={({ location }) => (\n            <Fragment>\n              <Tabs value={location.pathname}>\n                <Tab label=\"Home\" component={Link} to=\"/\" value=\"/\" />\n                <Tab label=\"Movie Tiles\" component={Link} to=\"/tiles\" value=\"/tiles\" />\n                <Tab label=\"Movie Select List\" component={Link} to=\"/list\" value=\"/list\" />\n              </Tabs>\n              <Switch>\n                <Route exact path={`${process.env.PUBLIC_URL}/`} component={Home} />\n                <Route\n                  path={`${process.env.PUBLIC_URL}/tiles`}\n                  render={() => <MovieList movies={movies} />}\n                />\n                <Route\n                  path={`${process.env.PUBLIC_URL}/list`}\n                  render={() => <MovieSelectList movies={movies} />}\n                />\n              </Switch>\n            </Fragment>\n          )}\n        />\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}