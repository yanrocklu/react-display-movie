{"version":3,"sources":["components/Header.js","components/MovieTile.js","components/MovieList.js","services/axios-movies.js","containers/MovieContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","src","alt","title","MovieTile","url","movie","Poster","replace","Title","Actors","style","fontSize","Plot","MovieList","movieList","movies","map","index","key","axiosInstance","axios","create","baseURL","MovieContainer","state","get","then","response","data","setState","error","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAkBeA,G,kBAbA,SAAAC,GAAK,OAClB,yBAAKC,UAAU,aACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aAAaC,IAAI,uDAAuDC,IAAI,eAC3F,6BAAMH,EAAMI,W,wCCeHC,G,MArBG,SAACL,GACjB,IAKoBM,EALdC,EAAQP,EAAMO,MAQpB,OACE,yBAAKN,UAAU,cACb,yBAAKA,UAAU,eAAeC,KALdI,EAK+BC,EAAMC,OAL9BF,EAAIG,QAAQ,cAAe,aAKYN,IAAI,KAClE,yBAAKF,UAAU,aACb,wBAAIA,UAAU,cAAcM,EAAMG,OAClC,wBAAIT,UAAU,iBAAiBM,EAAMI,QACrC,uBAAGV,UAAU,eAAeW,MAAO,CAAEC,SAAU,SAAWN,EAAMO,UCFzDC,G,MAZG,SAACf,GACjB,IAAMgB,EAAYhB,EAAMiB,OAAOC,KAAI,SAACX,EAAOY,GACzC,OAAO,kBAAC,EAAD,CAAWZ,MAAOA,EAAOa,IAAKD,OAGvC,OACE,yBAAKlB,UAAU,cACZe,K,QCJQK,E,OAJOC,EAAMC,OAAO,CACjCC,QAAS,sDC+BIC,E,YA7Bb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXT,OAAQ,IAJE,E,iFAQO,IAAD,OAGlBK,EAAMK,IAFe,gBAGlBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAC1BF,MAAK,SAACE,GACLA,GAAQ,EAAKC,SAAS,CAAEd,OAAQa,OAC/B,SAAAE,GACDC,QAAQC,IAAIF,Q,+BAKhB,OACE,yBAAK/B,UAAU,mBACb,kBAAC,EAAD,CAAWgB,OAAQkB,KAAKT,MAAMT,c,GAxBTmB,aCWdC,MAXf,WAGE,OACE,6BACE,kBAAC,EAAD,CAAQjC,MAJE,sBAKV,kBAAC,EAAD,QCCckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.5d52073a.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n// 'npm install --save prop-types' if want to use PropTypes\n// import PropTypes from 'prop-types';\n\nconst Header = props => (\n  <div className=\"container\">\n    <div className=\"headerTitle\">\n      <img className=\"title-icon\" src=\"https://img.icons8.com/wired/50/000000/film-reel.png\" alt=\"filem icon\"/>\n      <div>{props.title}</div>\n    </div>\n  </div>\n);\n\n// Header.propTypes = {\n//   name: PropTypes.string\n// };\n\nexport default Header;","import React from 'react';\nimport './MovieTile.css';\n\nconst MovieTile = (props) => {\n  const movie = props.movie;\n\n  // the poster img url in the json file are http, which will cause a '403 ERROR'.\n  // That is a common setup to limit the amount of hotlinking to images (when people link directly to image files on other hosts). Hot-linking is often prevented, because it causes traffic without actually getting a site real visitors.\n  // So a workaround is change the http to https\n  const httpToHttps = url => url.replace(/^http:\\/\\//i, 'https://');\n\n\n  return (\n    <div className=\"movie-card\">\n      <img className=\"card-img-top\" src={httpToHttps(movie.Poster)} alt=\"\" />\n      <div className=\"card-body\">\n        <h2 className=\"card-title\">{movie.Title}</h2>\n        <h4 className=\"card-subtitle\">{movie.Actors}</h4>\n        <p className=\"text-justify\" style={{ fontSize: '14px' }}>{movie.Plot}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieTile;\n","import React from 'react';\nimport MovieTile from './MovieTile';\nimport './MovieList.css';\n\nconst MovieList = (props) => {\n  const movieList = props.movies.map((movie, index) => {\n    return <MovieTile movie={movie} key={index}/>\n  });\n\n  return (\n    <div className=\"movie-list\">\n      {movieList}\n    </div>\n  )\n};\n\nexport default MovieList;\n","import axios from 'axios';\n\n// create an axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'https://react-display-movie-c4fc7.firebaseio.com/'\n});\n\nexport default axiosInstance;","import React, { Component } from 'react';\nimport MovieList from '../components/MovieList';\nimport axios from '../services/axios-movies';\n\n\nclass MovieContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: []\n    };\n  }\n\n  componentDidMount() {\n    const movieJsonUrl = '/movies.json';\n\n    axios.get(movieJsonUrl)\n      .then(response => response.data)\n      .then((data) => {\n        data && this.setState({ movies: data })\n      }, error => {\n        console.log(error);\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"movie-container\">\n        <MovieList movies={this.state.movies} />\n      </div>\n    );\n  }\n}\n\nexport default MovieContainer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MovieContainer from './containers/MovieContainer';\n\nfunction App() {\n  const title = 'React Movie Tiles';\n\n  return (\n    <div>\n      <Header title={title}/>\n      <MovieContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}